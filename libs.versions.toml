[versions]
spring-boot = "3.3.2"
grpc = "1.65.1"
grpc-spring-boot = "3.1.0.RELEASE"
protobuf = "3.25.3"

[libraries]
spring-boot-starter = { module = "org.springframework.boot:spring-boot-starter" }
spring-boot-starter-web = { module = "org.springframework.boot:spring-boot-starter-web" }
spring-boot-starter-reactor-netty = { module = "org.springframework.boot:spring-boot-starter-reactor-netty" }
spring-boot-starter-json = { module = "org.springframework.boot:spring-boot-starter-json" }
spring-boot-starter-actuator = { module = "org.springframework.boot:spring-boot-starter-actuator" }
spring-boot-starter-test = { module = "org.springframework.boot:spring-boot-starter-test" }

spring-boot-devtools = { module = "org.springframework.boot:spring-boot-devtools" }
spring-boot-docker-compose = { module = "org.springframework.boot:spring-boot-docker-compose" }

spring-cloud-starter-gateway = { module = "org.springframework.cloud:spring-cloud-starter-gateway" }
spring-cloud-dependencies = { module = "org.springframework.cloud:spring-cloud-dependencies", version = "2023.0.3" }

grpc-server-spring-boot = { module = "net.devh:grpc-server-spring-boot-starter", version.ref = "grpc-spring-boot" }
grpc-client-spring-boot = { module = "net.devh:grpc-client-spring-boot-starter", version.ref = "grpc-spring-boot" }
grpc-protobuf = { module = "io.grpc:grpc-protobuf", version.ref = "grpc" }
grpc-stub = { module = "io.grpc:grpc-stub", version.ref = "grpc" }
grpc-protoc-gen = { module = "io.grpc:protoc-gen-grpc-java", version.ref = "grpc" }

protobuf-protoc = { module = "com.google.protobuf:protoc", version.ref = "protobuf" }
protobuf-java-util = { module = "com.google.protobuf:protobuf-java-util", version.ref = "protobuf" }

javax-annotation-api = { module = "javax.annotation:javax.annotation-api", version = "1.3.2" }

aws-spring-cloud-s3 = { module = "io.awspring.cloud:spring-cloud-aws-starter-s3", version = "3.1.1" }

micrometer-tracing-bridge = { module = "io.micrometer:micrometer-tracing-bridge-otel" }
micrometer-prometheus = { module = "io.micrometer:micrometer-registry-prometheus" }

opentelemetry-zipkin = { module = "io.opentelemetry:opentelemetry-exporter-zipkin" }
opentelemetry-grpc = { module = "io.opentelemetry.instrumentation:opentelemetry-grpc-1.6", version = "2.5.0-alpha" }

springdoc-openapi = { module = "org.springdoc:springdoc-openapi-starter-webmvc-ui", version = "2.6.0" }
protoc-gen-doc = { module = "io.github.pseudomuto:protoc-gen-doc", version = "1.5.1" }

karate = { module = "com.intuit.karate:karate-junit5", version = "1.4.1" }
cucumber-reporting = { module = "net.masterthought:cucumber-reporting", version = "5.8.2" }
archunit = { module="com.tngtech.archunit:archunit-junit5", version="1.3.0" }

[bundles]
grpc = [ "grpc-protobuf", "grpc-stub" ]

[plugins]
spring-boot = { id = "org.springframework.boot", version.ref = "spring-boot" }
spring-dependency-management = { id = "io.spring.dependency-management", version = "1.1.6" }
protobuf = { id = "com.google.protobuf", version = "0.9.4" }
springdoc-openapi = { id = "org.springdoc.openapi-gradle-plugin", version = "1.9.0" }
spotless = { id = "com.diffplug.spotless", version = "6.25.0" }
jig = { id = "org.dddjava.jig-gradle-plugin", version = "2024.7.2" }
